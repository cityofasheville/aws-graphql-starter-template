/* **************************************************************************************
  WARNING: DO NOT EDIT this file except from inside the graphql-starter-template repository.
  Changes made to this file inside child repos will NOT be reflected in the parent source
  template repository, and will interfere with the ability to upgrade common code from
  the template repository.
***************************************************************************************** */
'use strict'
const { ApolloServer } = require('apollo-server-express');
const path = require('path')
const express = require('express')
const session = require('express-session');
const bodyParser = require('body-parser')
const cors = require('cors')
const compression = require('compression')
const awsServerlessExpressMiddleware = require('aws-serverless-express/middleware')
const cache = require('coa-web-cache');
const { checkLogin } = require('coa-web-login');
const MemoryStore = require('memorystore')(session);
const PgSession = require('connect-pg-simple')(session);


require('dotenv').config();
const apiConfig = require('./api/config');
const getDbConnection = require('./common/db');

const getUserInfo = require('./common/get_user_info');

if (apiConfig.enableEmployeeLogins) {
  getDbConnection('mds'); // Initialize the connection.
}

const app = express()


let sessionCache = null;
const prunePeriod = 86400000; // prune expired entries every 24h
const cacheMethod = process.env.cache_method || 'memory';
if (cacheMethod === 'memory') {
  sessionCache = new MemoryStore({
    checkPeriod: prunePeriod,
  });
} else if (cacheMethod === 'pg') {
  console.log('Need to allow setting db/schema and also non-session cache');
  sessionCache = new PgSession({
    pool: getDbConnection('mds'),
    schemaName: 'aux',
    ttl: prunePeriod,
  });
} else {
  throw new Error(`Unknown caching method ${cacheMethod}`);
}

// Initialize session management
app.use(session({
  name: process.env.sessionName,
  secret: process.env.sessionSecret,
  resave: false,
  saveUninitialized: true,
  store: sessionCache,
  cookie: {
    httpOnly: true,
    secure: 'auto',
    maxAge: 1000 * 60 * 60 * 24 * process.env.maxSessionDays,
  },
}));


// Add in any middleware defined by the API
require('./api').middlewares.forEach((m) => { app.use(m); });

// Now configure and apply the GraphQL server

const typeDefs = require('./schema');
const resolvers = require('./resolvers');

const server = new ApolloServer({
  typeDefs,
  resolvers,
  context: ({ req }) => ({
    session: req.session,
    req,
    cache,
  }),
});

app.use(cors());
server.applyMiddleware({ app });

// const router = express.Router()

// app.set('view engine', 'pug')

// if (process.env.NODE_ENV === 'test') {
//   // NOTE: aws-serverless-express uses this app for its integration tests
//   // and only applies compression to the /sam endpoint during testing.
//   router.use('/sam', compression())
// } else {
//   router.use(compression())
// }

// router.use(cors())
// router.use(bodyParser.json())
// router.use(bodyParser.urlencoded({ extended: true }))
// router.use(awsServerlessExpressMiddleware.eventContext())

// // NOTE: tests can't find the views directory without this
// app.set('views', path.join(__dirname, 'views'))

// router.get('/', (req, res) => {
//   res.render('index', {
//     apiUrl: req.apiGateway ? `https://${req.apiGateway.event.headers.Host}/${req.apiGateway.event.requestContext.stage}` : 'http://localhost:3000'
//   })
// })

// router.get('/sam', (req, res) => {
//   res.sendFile(`${__dirname}/sam-logo.png`)
// })

// router.get('/users', (req, res) => {
//   res.json(users)
// })

// router.get('/users/:userId', (req, res) => {
//   const user = getUser(req.params.userId)

//   if (!user) return res.status(404).json({})

//   return res.json(user)
// })

// router.post('/users', (req, res) => {
//   const user = {
//     id: ++userIdCounter,
//     name: req.body.name
//   }
//   users.push(user)
//   res.status(201).json(user)
// })

// router.put('/users/:userId', (req, res) => {
//   const user = getUser(req.params.userId)

//   if (!user) return res.status(404).json({})

//   user.name = req.body.name
//   res.json(user)
// })

// router.delete('/users/:userId', (req, res) => {
//   const userIndex = getUserIndex(req.params.userId)

//   if (userIndex === -1) return res.status(404).json({})

//   users.splice(userIndex, 1)
//   res.json(users)
// })

// const getUser = (userId) => users.find(u => u.id === parseInt(userId))
// const getUserIndex = (userId) => users.findIndex(u => u.id === parseInt(userId))

// // Ephemeral in-memory data store
// const users = [{
//   id: 1,
//   name: 'Joe'
// }, {
//   id: 2,
//   name: 'Jane'
// }]
// let userIdCounter = users.length

// // The aws-serverless-express library creates a server and listens on a Unix
// // Domain Socket for you, so you can remove the usual call to app.listen.
// // app.listen(3000)
// app.use('/', router)

// Export your express server so you can import it in the lambda function.
module.exports = app
