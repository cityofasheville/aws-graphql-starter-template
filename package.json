{
  "name": "aws-serverless-express-example",
  "version": "2.1.1",
  "description": "Example application for running a Node Express app on AWS Lambda using Amazon API Gateway.",
  "main": "lambda.js",
  "config": {
    "s3BucketName": "graphql-starter-template-bucket",
    "region": "us-east-1",
    "cloudFormationStackName": "AwsGraphqlStarterTemplateStack",
    "functionName": "AwsGraphqlStarterTemplateFunction",
    "accountId": "518970837364"
  },
  "scripts": {
    "start": "node index.local.js",
    "config": "node ./scripts/configure.js",
    "deconfig": "node ./scripts/deconfigure.js",
    "local": "node scripts/local",
    "invoke-lambda": "aws lambda invoke --function-name $npm_package_config_functionName --region $npm_package_config_region --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
    "create-bucket": "aws s3 mb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "delete-bucket": "aws s3 rb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "package": "aws cloudformation package --template ./cloudformation.yaml --s3-bucket $npm_package_config_s3BucketName --output-template packaged-sam.yaml --region $npm_package_config_region",
    "deploy": "aws cloudformation deploy --template-file packaged-sam.yaml --stack-name $npm_package_config_cloudFormationStackName --capabilities CAPABILITY_IAM --region $npm_package_config_region",
    "package-deploy": "npm run package && npm run deploy",
    "delete-stack": "aws cloudformation delete-stack --stack-name $npm_package_config_cloudFormationStackName --region $npm_package_config_region",
    "setup": "npm install && (aws s3api get-bucket-location --bucket $npm_package_config_s3BucketName --region $npm_package_config_region || npm run create-bucket) && npm run package-deploy",
    "win-config": "npm run config",
    "win-deconfig": "npm run deconfig",
    "win-local": "npm run local",
    "win-invoke-lambda": "aws lambda invoke --function-name %npm_package_config_functionName% --region %npm_package_config_region% --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
    "win-create-bucket": "aws s3 mb s3://%npm_package_config_s3BucketName% --region %npm_package_config_region%",
    "win-delete-bucket": "aws s3 rb s3://%npm_package_config_s3BucketName% --region %npm_package_config_region%",
    "win-package": "aws cloudformation package --template ./cloudformation.yaml --s3-bucket %npm_package_config_s3BucketName% --output-template packaged-sam.yaml --region %npm_package_config_region%",
    "win-deploy": "aws cloudformation deploy --template-file packaged-sam.yaml --stack-name %npm_package_config_cloudFormationStackName% --capabilities CAPABILITY_IAM --region %npm_package_config_region%",
    "win-package-deploy": "npm run win-package && npm run win-deploy",
    "win-delete-stack": "aws cloudformation delete-stack --stack-name %npm_package_config_cloudFormationStackName% --region %npm_package_config_region%",
    "win-setup": "npm install && (aws s3api get-bucket-location --bucket %npm_package_config_s3BucketName% --region %npm_package_config_region% || npm run win-create-bucket) && npm run win-package-deploy",
    "snyk-protect": "snyk protect",
    "prepare": "npm run snyk-protect"
  },
  "license": "Apache-2.0",
  "dependencies": {
    "apollo-server": "^2.2.6",
    "apollo-server-express": "^2.2.6",
    "aws-serverless-express": "^3.3.3",
    "axios": "^0.18.0",
    "body-parser": "^1.17.1",
    "coa-node-logging": "^2.0.4",
    "coa-web-cache": "^1.2.2",
    "coa-web-login": "^2.1.4",
    "compression": "^1.6.2",
    "connect-pg-simple": "^5.0.0",
    "cors": "^2.8.3",
    "dotenv": "^6.2.0",
    "express": "^4.15.2",
    "express-session": "^1.15.6",
    "graphql": "^14.0.2",
    "lodash": "^4.17.11",
    "memorystore": "^1.6.0",
    "mssql": "^4.3.0",
    "pg": "^7.7.1",
    "pug": "^2.0.0-rc.1",
    "snyk": "^1.161.1"
  },
  "snyk": true
}
